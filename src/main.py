import os
import json
import yt_dlp
import redis
from loguru import logger


# Redis
r = redis.Redis(host="localhost", port=6379, db=0)


download_path = "downloads/%(playlist_title)s/%(title)s.%(ext)s"
archive_file = "archive.txt"  # –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞


def append_to_archive(video_id: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –≤ archive.txt"""
    with open(archive_file, "a", encoding="utf-8") as f:
        f.write(f"youtube {video_id}\n")

def already_downloaded(video_id: str) -> bool:
    return r.sismember("downloaded_videos", video_id)

def mark_downloaded(video_id: str):
    r.sadd("downloaded_videos", video_id)
    append_to_archive(video_id)

def cache_info(key: str, info: dict, ttl: int = 3600):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ Redis"""
    r.setex(key, ttl, json.dumps(info))

def get_cached_info(key: str):
    """–ë–µ—Ä—ë–º JSON –∏–∑ Redis"""
    data = r.get(key)
    if data:
        return json.loads(data)
    return None

def process_entry(ydl, entry, playlist_title=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    if not entry:
        return

    video_id = entry.get("id")
    if not video_id:
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ Redis
    if already_downloaded(video_id):
        logger.info(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {video_id}, —É–∂–µ —Å–∫–∞—á–∞–Ω–æ")
        return

    # –µ—Å–ª–∏ –≤ entry –Ω–µ—Ç playlist_title ‚Äî –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
    if playlist_title and not entry.get("playlist_title"):
        entry["playlist_title"] = playlist_title

    # –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = ydl.prepare_filename(entry)
    if os.path.exists(filename):
        logger.info(f"üìÇ –§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ Redis")
        mark_downloaded(video_id)
        return

    # –∫–∞—á–∞–µ–º
    ydl.download([url])
    mark_downloaded(video_id)


def download(url: str, download_path: str = "downloads"):
    ydl_opts = {
        "outtmpl": os.path.join(download_path, "%(playlist_title)s/%(title)s.%(ext)s"),
        "format": "bestvideo+bestaudio/best",
        "merge_output_format": "mp4",
        "ignoreerrors": True,
        "download_archive": "archive.txt",
        "retries": 10,
        "fragment_retries": 10,
        "continuedl": True,
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        cache_key = f"ytinfo:{url}"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        info = get_cached_info(cache_key)
        if info:
            logger.info("‚ö° –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis-–∫—ç—à–∞")
        else:
            logger.info("üåç –¢—è–Ω–µ–º –¥–∞–Ω–Ω—ã–µ —Å YouTube")
            info = ydl.extract_info(url, download=False)
            cache_info(cache_key, info, ttl=3600)

        # –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ
        if "entries" in info and info["entries"]:
            playlist_title = info.get("title")
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç: {playlist_title} ({len(info['entries'])} –≤–∏–¥–µ–æ)")
            for entry in info["entries"]:
                process_entry(ydl, entry, playlist_title=playlist_title)
        else:
            logger.info(f"‚ñ∂ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {info.get('title')}")
            process_entry(ydl, info)


if __name__ == "__main__":
    # –°—Å—ã–ª–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç)
    url = "https://youtube.com/playlist?list=PL7AEFfKAwqe7TA68MWsIWvQjwdlccSBGQ&si=61B4d-VQA3Er3wPr"
    # url = "https://youtube.com/playlist?list=PL13yZK73a_cxtjBI7PEJRkeZ2ddP54KfZ&si=fnsHI5RyY9RjYz5V"
    download(url)
